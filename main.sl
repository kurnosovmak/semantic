<?xml version="1.0" encoding="utf-16"?><Root Id="5cffcc39-0bb2-462e-8e3f-2b14732fe269" Version="1.2" TestModule="" ImplementModule=""><Module NameWord="main"><Import NameWord="PointF"></Import><Import NameWord="CircleF"></Import><Import NameWord="LineF"></Import><Import NameWord="TriangleF"></Import><Import NameWord="MathF"></Import></Module><Beginning><NullOperator KeyWord=""></NullOperator><Variable TypeWord="1«LineF.Line" NameWord="line"></Variable><Variable TypeWord="1«PointF.Point" NameWord="point"></Variable><Variable TypeWord="1«PointF.Point" NameWord="point2"></Variable><Variable TypeWord="1«PointF.Point" NameWord="point3"></Variable><Variable TypeWord="1«CircleF.Circle" NameWord="circle"></Variable><Variable TypeWord="1«TriangleF.Triangle" NameWord="triangle"></Variable><NullOperator KeyWord=""></NullOperator><Call Expression="Operand§point¶Dot§.¶Function§Init¶LeftFuncBracket§(¶Operand§3¶Comma§,¶Space§ ¶Operand§0¶RightFuncBracket§)¶"></Call><Call Expression="Operand§point2¶Dot§.¶Function§Init¶LeftFuncBracket§(¶Operand§3¶Comma§,¶Space§ ¶Operand§4¶RightFuncBracket§)¶"></Call><Call Expression="Operand§point3¶Dot§.¶Function§Init¶LeftFuncBracket§(¶Operand§0¶Comma§,¶Space§ ¶Operand§0¶RightFuncBracket§)¶"></Call><Call Expression="Operand§circle¶Dot§.¶Function§Init¶LeftFuncBracket§(¶Operand§point¶Comma§,¶Space§ ¶Operand§2¶RightFuncBracket§)¶"></Call><Call Expression="Operand§line¶Dot§.¶Function§Init2¶LeftFuncBracket§(¶Operand§0¶Comma§,¶Space§ ¶Operand§0¶Comma§,¶Space§ ¶Operand§2¶Comma§,¶Space§ ¶Operand§0¶RightFuncBracket§)¶"></Call><Call Expression="Operand§triangle¶Dot§.¶Function§Init2¶LeftFuncBracket§(¶Operand§0¶Comma§,¶Space§ ¶Operand§0¶Comma§,¶Space§ ¶Operand§3¶Comma§,¶Space§ ¶Operand§0¶Comma§,¶Space§ ¶Operand§3¶Comma§,¶Space§ ¶Operand§4¶RightFuncBracket§)¶"></Call><NullOperator KeyWord=""></NullOperator><Output Expression="Operand§MathF¶Dot§.¶Function§minDistancePointToLine¶LeftFuncBracket§(¶Operand§point¶Comma§,¶Space§ ¶Operand§line¶RightFuncBracket§)¶"></Output><Output Expression="Operand§&quot;\n&quot;¶"></Output><Output Expression="Operand§circle¶Dot§.¶Function§getS¶LeftFuncBracket§(¶Operand§¶RightFuncBracket§)¶"></Output><Output Expression="Operand§&quot;\n&quot;¶"></Output><Output Expression="Operand§triangle¶Dot§.¶Function§getPerimeter¶LeftFuncBracket§(¶Operand§¶RightFuncBracket§)¶"></Output><Comment TextBody="{\rtf1\ansi\ansicpg1252\uc1\htmautsp\deff2{\fonttbl{\f0\fcharset0 Times New Roman;}{\f2\fcharset0 Verdana;}}{\colortbl;\red255\green255\blue255;\red0\green100\blue0;}\loch\hich\dbch\pard\plain\ltrpar\itap0{\lang1033\fs24\f2\cf0 \cf0\ql{\f2 {\lang1049\cf2\ltrch cout &lt;&lt; point.getDistance(point, point2) == point.getDistance(point, point3);}\li0\ri0\sa0\sb0\fi0\ql\par}&#xD;&#xA;}&#xD;&#xA;}"></Comment><NullOperator KeyWord=""></NullOperator><Output Expression="Operand§&quot;  = Perimeter : isEquilateral is &quot;¶"></Output><Output Expression="Operand§triangle¶Dot§.¶Function§isEquilateral¶LeftFuncBracket§(¶Operand§¶RightFuncBracket§)¶"></Output><NullOperator KeyWord=""></NullOperator></Beginning></Root>